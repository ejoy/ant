import "@ant.general"
import "@ant.scene"
import "@ant.camera"
import "@ant.asset"
import "@ant.objcontroller"

import "render_system/depth/depth.ecs"
import "render_layer.ecs"

component "main_queue"

policy "main_queue"
    .require_policy "ant.render|render_queue"
    .component "main_queue"

policy "render_object"
    .require_system "ant.render|render_system"
    .component_opt "render_object"
    .component_opt "filter_material"

component "render_args"
    .type "c"
    .field "viewid:word"
    .field "queue_mask:int64"
    .field "material_index:byte"

component "render_object"
    .type "c"
    .field "worldmat:userdata|math_t"
    --materials
    .field "rm_idx:dword"
    --visible
    .field "visible_masks:int64"  -- determiate which queue can see the render_object(main_view/cast_shadow/selectable, etc ...)
    .field "cull_masks:int64"

    --mesh
    .field "vb_start:dword"
    .field "vb_num:dword"
    .field "vb_handle:dword"

    .field "vb2_start:dword"
    .field "vb2_num:dword"
    .field "vb2_handle:dword"

    .field "ib_start:dword"
    .field "ib_num:dword"
    .field "ib_handle:dword"

    .field "idb_handle:dword"
    .field "itb_handle:dword"
    .field "draw_num:dword"

    .field "render_layer:dword"
    .field "discard_flags:byte"

    .implement "render_system/render_object.lua"
    .method "init"
    .method "remove"
    .method "marshal"
    .method "unmarshal"

component "filter_material".type "lua"
component "render_object_update"
component "visible"

policy "render"
    .require_policy "ant.render|render_object"
    .require_policy "ant.scene|scene_object"
    .require_policy "ant.scene|bounding"
    .require_system "ant.render|render_layer_system"
    .require_system "ant.render|render_system"
    .require_interface "ant.scene|ivisible_state"
    .require_interface "ant.render|irender"
    .component_opt "render_layer"
    .component "mesh"
    .component "material"
    .component "visible_state"

system "heap_mesh"
    .require_policy "ant.render|draw_indirect"
    .require_system "ant.render|draw_indirect_system"
    .implement "render_system/heap_mesh.lua"
    .method "heap_mesh"
    .method "entity_init"
    .method "entity_ready"
    .method "entity_remove"

component "heapmesh".type "lua"
component "heapmesh_ready"


interface "iheapmesh"
    .implement "render_system/heap_mesh.lua"
    .method "update_heap_mesh_number"
    .method "update_heap_mesh_sidesize"

policy "heap_mesh"
    .require_system "ant.render|heap_mesh"
    .component "heapmesh"

system "skinning_system"
    .implement "render_system/skinning_system.lua"
    .require_system "ant.animation|animation_system"
    .method "entity_init"
    .method "entity_remove"
    .method "skin_mesh"

component "cs_skinning_ready"
system "cs_skinning_system"
    .implement "render_system/cs_skinning_system.lua"
    .require_system "ant.animation|animation_system"
    .method "init"
    .method "entity_init"
    .method "entity_ready"
    .method "entity_remove"
    .method "skin_mesh"

component "skinning"
component "skinning_builder"
component "skininfo".type "lua"

policy "skinrender"
    .require_policy "ant.render|render_object"
    .require_policy "ant.scene|bounding"
    .require_system "ant.render|render_system"
    .require_system "ant.render|render_layer_system"
    .require_system "ant.render|skinning_system"
    .require_system "ant.render|cs_skinning_system"
    .require_interface "ant.scene|ivisible_state"
    .require_interface "ant.render|irender"
    .component_opt "skinning"
    .component_opt "render_layer"
    .component_opt "skininfo"
    .component "mesh"
    .component "material"
    .component "visible_state"

policy "simplerender"
    .require_policy "ant.render|render_object"
    .require_policy "ant.scene|scene_object"
    .require_policy "ant.scene|bounding"
    .require_system "ant.render|render_system"
    .require_system "ant.render|render_layer_system"
    .require_interface "ant.scene|ivisible_state"
    .require_interface "ant.render|irender"
	.component "simplemesh"
    .component_opt "owned_mesh_buffer"
    .component_opt "render_layer"
	.component "material"
    .component "visible_state"

component "watch_screen_buffer"
policy "watch_screen_buffer"
    .component "watch_screen_buffer"
    .component "render_target"

system "render_target_system"
    .implement "render_system/renderqueue.lua"
    .method "entity_init"
    .method "entity_ready"
    .method "entity_remove"

component "render_target".type "lua"
    .require_system "ant.render|render_target_system"

policy "render_pipeline"
    .require_policy "ant.render|forward_render"
    .require_policy "ant.render|cluster_render"
    .require_policy "ant.render|preprocess"
    .require_policy "ant.render|postprocess"

component "postprocess_obj"
component "filter_result".type "lua"
component "camera_ref".type "int64"
component "camera_changed"
component "queue_name".type "lua"
policy "render_queue"
    .require_policy "ant.render|render_pipeline"
    .component "render_target"
    .component "visible"
    .component "queue_name"
    .component "camera_ref"

component "need_touch"

component "cull_args"
    .type "c"
    .field "frustum_planes:userdata|math_t"
    .field "cull_mask:int64"

policy "cull"
    .require_system "ant.render|cull_system"

policy "render_target"
    .component "render_target"

system "submit_render_system"
    .implement ":system.render"
    .method "init"
    .method "exit"
    .method "render_submit"

system "render_system"
    .implement "render_system/render_system.lua"
    .require_system "ant.render|submit_render_system"
    .require_system "ant.render|cull_system"
    .require_system "ant.render|viewgroup_system"
    .require_system "viewport_detect_system"
    .method "component_init"
    .method "entity_init"
    .method "entity_remove"
    .method "commit_system_properties"
    .method "update_filter"
    .method "end_filter"
    .method "scene_update"
    .method "render_preprocess"

policy "indirect"
    .component "indirect"

component "indirect".type "lua"

policy "draw_indirect"
    .component "draw_indirect"

component "draw_indirect".type "lua"

system "draw_indirect_system"
    .implement "draw_indirect_system.lua"
    .require_system "ant.render|draw_indirect_system"
    .method "entity_init"
    .method "entity_remove"

interface "idrawindirect"
    .implement "draw_indirect_system.lua"
    .method "get_draw_indirect_type"


system "cull_system"
    .implement "cull_system.lua"
    .require_system "ant.render|viewgroup_system"
    .method "init"
    .method "exit"
    .method "cull"

interface "icull_primitive"
    .implement "cull_system.lua"
    .method "cull"

interface "irender"
    .implement "render_system/render.lua"
    .method "layer_names"
    .method "create_pre_depth_queue"
    .method "create_main_queue"
    .method "create_view_queue"
    .method "get_main_view_rendertexture"
    .method "set_view_frame_buffer"
    .method "screen_capture"
    .method "read_render_buffer_content"
    .method "quad_ib"
    .method "quad_ib_num"
    .method "check_set_state"
    .method "create_material_from_template"
    .method "full_quad"
    .method "is_msaa_buffer"
    .method "use_pre_depth"

interface "irenderqueue"
    .implement "render_system/renderqueue.lua"
    .require_interface "ant.camera|icamera"
    .method "viewid"
    .method "clear_state"
    .method "view_rect"
    .method "frame_buffer"
    .method "camera"
    .method "visible"
    .method "main_camera"
    .method "set_view_clear"
    .method "set_view_clear_state"
    .method "set_view_clear_color"
    .method "set_view_clear_depth"
    .method "set_view_clear_stencil"
    .method "set_view_rect"
    .method "set_camera"
    .method "set_visible"
    .method "update_rendertarget"
    .method "update_render_object"

interface "ientity"
    .implement "components/entity.lua"
    .method "create_mesh"
    .method "create_grid_entity_simple"
    .method "create_grid_entity"
    .method "plane_mesh"
    .method "quad_mesh"
    .method "arrow_mesh"
    .method "fullquad_mesh"
    .method "create_quad_entity"
    .method "create_frustum_entity"
    .method "create_axis_entity"
    .method "create_skybox"
    .method "create_procedural_sky"
    .method "create_circle_entity"
    .method "create_line_entity"
    .method "create_screen_line_list"
    .method "create_prim_plane_entity"
    .method "create_grid_mesh_entity"
    .method "create_circle_mesh_entity"
    .method "create_gamma_test_entity"
    .method "create_simple_render_entity"
    .method "create_arrow_entity"
    .method "create_screen_axis_entity"
    .method "create_quad_lines_entity"
    .method "simple_render_entity_data"
    .method "frustum_entity_data"
    .method "axis_entity_data"

import "render_system/forward_render.ecs"
import "render_system/cluster_render.ecs"


pipeline "render"
    .stage "skin_mesh"
    .stage "heap_mesh"
    .stage "refine_filter"
    .stage "cull"
    .stage "refine_camera"
    .stage "stone_mountain"
    .pipeline "preprocess"
    .pipeline "render_process"
    .pipeline "postprocess"

import "ibl/ibl.ecs"

component "view_visible"
system "viewgroup_system"
    .implement "render_system/render_system.lua"
    .method "init"

component "render_layer".type "lua"